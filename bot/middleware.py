"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Ç–ª–∞–¥–∫–æ–π.
"""

import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject
from config.settings import get_settings

logger = logging.getLogger(__name__)


class AccessMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware."""
        self.settings = get_settings()
        super().__init__()

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞.

        Args:
            handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        user_id = None
        chat_type = None
        user_info = ""

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ —Ç–∏–ø —á–∞—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        if isinstance(event, Message):
            user_id = event.from_user.id if event.from_user else None
            chat_type = event.chat.type if event.chat else None
            if event.from_user:
                user_info = f"@{event.from_user.username or 'no_username'} ({event.from_user.full_name or 'no_name'})"
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id if event.from_user else None
            chat_type = event.message.chat.type if event.message and event.message.chat else None
            if event.from_user:
                user_info = f"@{event.from_user.username or 'no_username'} ({event.from_user.full_name or 'no_name'})"

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
        # (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if user_id is None:
            logger.debug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ user_id")
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - –≤ –≥—Ä—É–ø–ø–∞—Ö –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
        if chat_type in ['group', 'supergroup']:
            # –í –≥—Ä—É–ø–ø–∞—Ö –±–æ—Ç –º–æ–ª—á–∏—Ç, —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞–µ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {chat_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return None

        # –û–¢–õ–ê–î–û–ß–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê:")
        logger.info(f"   User ID: {user_id} (—Ç–∏–ø: {type(user_id)})")
        logger.info(f"   User Info: {user_info}")
        logger.info(f"   Chat Type: {chat_type}")

        # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        admin_users = self.settings.admin_users_set
        verify_users = self.settings.verify_users_set
        all_users = self.settings.all_allowed_users

        logger.info(f"   Admin Users: {admin_users}")
        logger.info(f"   Verify Users: {verify_users}")
        logger.info(f"   All Allowed: {all_users}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        is_admin = self.settings.is_admin(user_id)
        is_verify = self.settings.is_verify_user(user_id)
        is_allowed = self.settings.is_allowed_user(user_id)

        logger.info(f"   Is Admin: {is_admin}")
        logger.info(f"   Is Verify: {is_verify}")
        logger.info(f"   Is Allowed: {is_allowed}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        direct_admin_check = user_id in admin_users
        direct_verify_check = user_id in verify_users
        direct_all_check = user_id in all_users

        logger.info(f"   Direct Admin Check: {direct_admin_check}")
        logger.info(f"   Direct Verify Check: {direct_verify_check}")
        logger.info(f"   Direct All Check: {direct_all_check}")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–∞—Ö
        if not is_allowed:
            logger.warning(f"‚ùå –û–¢–ö–ê–ó –í –î–û–°–¢–£–ü–ï –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_info}")
            logger.warning(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–∞—Ö –¥–æ—Å—Ç—É–ø–∞")
            logger.warning(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ VERIFY_USERS –∏–ª–∏ ADMIN_USERS")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if isinstance(event, Message) and chat_type == 'private':
                debug_info = (
                    f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                    f"üÜî –í–∞—à Telegram ID: `{user_id}`\n"
                    f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user_info}\n\n"
                    f"üìù –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.\n"
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é VERIFY_USERS –∏–ª–∏ ADMIN_USERS –≤ —Ñ–∞–π–ª–µ .env"
                )
                await event.answer(debug_info, parse_mode="Markdown")
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. ID: {user_id}",
                    show_alert=True
                )

            return None  # –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã–µ
        data['user_permissions'] = {
            'is_admin': is_admin,
            'can_verify': is_verify,
            'user_id': user_id,
            'chat_type': chat_type
        }

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {user_info} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –≤ {chat_type}")
        logger.info(f"   –ü—Ä–∞–≤–∞: admin={is_admin}, verify={is_verify}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(event, data)


class AdminRequiredMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware."""
        self.settings = get_settings()
        super().__init__()

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

        Args:
            handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        user_id = None
        chat_type = None

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ —Ç–∏–ø —á–∞—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        if isinstance(event, Message):
            user_id = event.from_user.id if event.from_user else None
            chat_type = event.chat.type if event.chat else None
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id if event.from_user else None
            chat_type = event.message.chat.type if event.message and event.message.chat else None

        if user_id is None:
            return None

        # –í –≥—Ä—É–ø–ø–∞—Ö –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if chat_type in ['group', 'supergroup']:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = self.settings.is_admin(user_id)

        logger.info(f"üîê –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ü–†–ê–í:")
        logger.info(f"   User ID: {user_id}")
        logger.info(f"   Is Admin: {is_admin}")
        logger.info(f"   Admin Users: {self.settings.admin_users_set}")

        if not is_admin:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if isinstance(event, Message) and chat_type == 'private':
                await event.answer(
                    f"‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
                    f"üÜî –í–∞—à ID: `{user_id}`\n"
                    f"–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.\n\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.",
                    parse_mode="Markdown"
                )
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. ID: {user_id}",
                    show_alert=True
                )

            return None

        logger.info(f"‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(event, data)


class VerifyRequiredMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware."""
        self.settings = get_settings()
        super().__init__()

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.

        Args:
            handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        user_id = None
        chat_type = None

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ —Ç–∏–ø —á–∞—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        if isinstance(event, Message):
            user_id = event.from_user.id if event.from_user else None
            chat_type = event.chat.type if event.chat else None
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id if event.from_user else None
            chat_type = event.message.chat.type if event.message and event.message.chat else None

        if user_id is None:
            return None

        # –í –≥—Ä—É–ø–ø–∞—Ö –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        if chat_type in ['group', 'supergroup']:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç–æ–∂–µ –º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å)
        can_verify = self.settings.is_verify_user(user_id)

        logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –ù–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–Æ:")
        logger.info(f"   User ID: {user_id}")
        logger.info(f"   Can Verify: {can_verify}")
        logger.info(f"   Admin Users: {self.settings.admin_users_set}")
        logger.info(f"   Verify Users: {self.settings.verify_users_set}")

        if not can_verify:
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–µ–∑ –ø—Ä–∞–≤")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            if isinstance(event, Message) and chat_type == 'private':
                await event.answer(
                    f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.\n\n"
                    f"üÜî –í–∞—à ID: `{user_id}`\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤.",
                    parse_mode="Markdown"
                )
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤. ID: {user_id}",
                    show_alert=True
                )

            return None

        logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(event, data)


def setup_middlewares(dp):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # –û–±—â–∏–π middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    dp.message.middleware(AccessMiddleware())
    dp.callback_query.middleware(AccessMiddleware())

    logger.info("‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–æ—Å—Ç—É–ø–∞
    settings = get_settings()
    logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞:")
    logger.info(f"   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ({len(settings.admin_users_set)}): {settings.admin_users_set}")
    logger.info(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ({len(settings.verify_users_set)}): {settings.verify_users_set}")
    logger.info(f"   –í—Å–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(settings.all_allowed_users)}")


def admin_required():
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Returns:
        AdminRequiredMiddleware: Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    return AdminRequiredMiddleware()


def verify_required():
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.

    Returns:
        VerifyRequiredMiddleware: Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    """
    return VerifyRequiredMiddleware()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
def test_access_permissions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    settings = get_settings()

    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê:")
    print("=" * 50)
    print(f"Admin users: {settings.admin_users}")
    print(f"Verify users: {settings.verify_users}")
    print(f"Admin users set: {settings.admin_users_set}")
    print(f"Verify users set: {settings.verify_users_set}")
    print(f"All allowed users: {settings.all_allowed_users}")
    print("=" * 50)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = input("–í–≤–µ–¥–∏—Ç–µ Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ")
    try:
        user_id = int(test_user_id)
        print(f"\nüß™ –¢–ï–°–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}:")
        print(f"   is_admin: {settings.is_admin(user_id)}")
        print(f"   is_verify_user: {settings.is_verify_user(user_id)}")
        print(f"   is_allowed_user: {settings.is_allowed_user(user_id)}")
        print(f"   in admin_users_set: {user_id in settings.admin_users_set}")
        print(f"   in verify_users_set: {user_id in settings.verify_users_set}")
        print(f"   in all_allowed_users: {user_id in settings.all_allowed_users}")
    except ValueError:
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    test_access_permissions()