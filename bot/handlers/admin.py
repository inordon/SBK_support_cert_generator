"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
"""

import logging
import re
from datetime import datetime, date, timedelta
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from core.service import get_certificate_service
from core.models import CertificateRequest
from core.exceptions import *
from ..states import CreateCertificateStates
from ..keyboards import (
    get_main_menu_admin, get_confirmation_keyboard, get_cancel_keyboard,
    ButtonTexts, remove_keyboard
)
from ..middleware import admin_required
from config.settings import get_settings

logger = logging.getLogger(__name__)
router = Router()
router.message.middleware(admin_required())

# –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
certificate_service = get_certificate_service()
settings = get_settings()


@router.message(F.text == ButtonTexts.CREATE_CERTIFICATE)
async def start_create_certificate(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    instruction_text = """üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

```
01.12.2024-01.12.2025
1234567890
example.com
100
```

üìã –ü—Ä–∏–º–µ—Ä—ã:
```
01.01.2025-31.12.2025
7707083893
my-site.com
500
```

```
01.07.2025-30.06.2026
1234567890
*.example.com
1
```

‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–æ–º–µ–Ω–æ–≤:
‚Ä¢ example.com
‚Ä¢ sub.example.com
‚Ä¢ my-site.com
‚Ä¢ *.example.com (wildcard)
‚Ä¢ *.sub.example.com

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å":"""

    await message.answer(
        instruction_text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )

    await state.set_state(CreateCertificateStates.waiting_for_certificate_data)


@router.message(CreateCertificateStates.waiting_for_certificate_data)
async def process_certificate_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    if message.text == ButtonTexts.CANCEL:
        await cancel_creation(message, state)
        return

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        certificate_data = parse_certificate_message(message.text)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        errors = certificate_service.validate_certificate_data(
            certificate_data['domain'],
            certificate_data['inn'],
            certificate_data['valid_from'],
            certificate_data['valid_to'],
            certificate_data['users_count']
        )

        if errors:
            error_text = "‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors)
            error_text += "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å':"

            await message.answer(
                error_text,
                reply_markup=get_cancel_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –¥–æ–º–µ–Ω–∞
        try:
            from core.models import SearchRequest
            search_request = SearchRequest(domain=certificate_data['domain'], active_only=True)
            existing_certificates = certificate_service.search_certificates(search_request)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(**certificate_data, has_existing=len(existing_certificates) > 0)

            if existing_certificates:
                certificates_list = certificate_service.format_certificates_list(existing_certificates)
                await message.answer(
                    f"‚ö†Ô∏è –î–ª—è –¥–æ–º–µ–Ω–∞ {certificate_data['domain']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:\n\n"
                    f"{certificates_list}\n\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞?"
                )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            period_str = f"{certificate_data['valid_from'].strftime('%d.%m.%Y')}-{certificate_data['valid_to'].strftime('%d.%m.%Y')}"

            confirmation_text = (
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:\n\n"
                f"üåê –î–æ–º–µ–Ω: {certificate_data['domain']}\n"
                f"üè¢ –ò–ù–ù: {certificate_data['inn']}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_str}\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {certificate_data['users_count']}\n"
            )

            if len(existing_certificates) > 0:
                confirmation_text += "\n‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã!"

            await message.answer(
                confirmation_text,
                reply_markup=get_confirmation_keyboard()
            )

            await state.set_state(CreateCertificateStates.waiting_for_confirmation)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_cancel_keyboard()
            )

    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )


def parse_certificate_message(text: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
    1. –ü–æ—Å—Ç—Ä–æ—á–Ω–æ: –ø–µ—Ä–∏–æ–¥ / –ò–ù–ù / –¥–æ–º–µ–Ω / –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    2. –° –ø–æ–¥–ø–∏—Å—è–º–∏: "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ...", "–ò–ù–ù: ..." –∏ —Ç.–¥.

    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞

    Raises:
        ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    text = text.strip()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–¥–ø–∏—Å–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if any(keyword in text.lower() for keyword in ['—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:', '–∏–Ω–Ω:', '–¥–æ–º–µ–Ω:', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']):
        return parse_certificate_with_labels(text)

    # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    lines = [line.strip() for line in text.split('\n') if line.strip()]

    if len(lines) != 4:
        raise ValueError(
            f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)}. –û–∂–∏–¥–∞–µ—Ç—Å—è 4 —Å—Ç—Ä–æ–∫–∏:\n"
            "1. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì)\n"
            "2. –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)\n"
            "3. –î–æ–º–µ–Ω\n"
            "4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )

    try:
        # –°—Ç—Ä–æ–∫–∞ 1: –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è
        period_line = lines[0]
        if '-' not in period_line:
            raise ValueError("–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")

        date_parts = period_line.split('-')
        if len(date_parts) != 2:
            raise ValueError("–ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å")

        valid_from = datetime.strptime(date_parts[0].strip(), "%d.%m.%Y").date()
        valid_to = datetime.strptime(date_parts[1].strip(), "%d.%m.%Y").date()
        result['valid_from'] = valid_from
        result['valid_to'] = valid_to

    except ValueError as e:
        if "time data" in str(e):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")
        raise ValueError(f"–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ: {e}")

    # –°—Ç—Ä–æ–∫–∞ 2: –ò–ù–ù
    inn_line = lines[1]
    if not inn_line.isdigit():
        raise ValueError("–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ò–ù–ù")
    if len(inn_line) not in [10, 12]:
        raise ValueError("–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä")
    result['inn'] = inn_line

    # –°—Ç—Ä–æ–∫–∞ 3: –î–æ–º–µ–Ω
    domain_line = lines[2].lower()
    if not domain_line or '.' not in domain_line:
        raise ValueError("–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è")
    result['domain'] = domain_line

    # –°—Ç—Ä–æ–∫–∞ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_line = lines[3]
    if not users_line.isdigit():
        raise ValueError("–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

    users_count = int(users_line)
    if users_count < 1:
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    result['users_count'] = users_count

    return result


def parse_certificate_with_labels(text: str) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—è–º–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç).

    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—è–º–∏

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞

    Raises:
        ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    result = {}

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    patterns = {
        'period': r'—Å—Ä–æ–∫\s+–¥–µ–π—Å—Ç–≤–∏—è\s*:\s*(\d{1,2}\.\d{1,2}\.\d{4})\s*-\s*(\d{1,2}\.\d{1,2}\.\d{4})',
        'inn': r'–∏–Ω–Ω\s*:\s*(\d{10,12})',
        'domain': r'–¥–æ–º–µ–Ω\s*:\s*([a-zA-Z0-9.*-]+\.[a-zA-Z]{2,})',
        'users': r'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\s+–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\s*:\s*(\d+)'
    }

    # –ò—â–µ–º –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è
    period_match = re.search(patterns['period'], text, re.IGNORECASE | re.UNICODE)
    if not period_match:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")

    try:
        valid_from = datetime.strptime(period_match.group(1), "%d.%m.%Y").date()
        valid_to = datetime.strptime(period_match.group(2), "%d.%m.%Y").date()
        result['valid_from'] = valid_from
        result['valid_to'] = valid_to
    except ValueError as e:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {e}")

    # –ò—â–µ–º –ò–ù–ù
    inn_match = re.search(patterns['inn'], text, re.IGNORECASE)
    if not inn_match:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –ò–ù–ù. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ò–ù–ù: 1234567890")
    result['inn'] = inn_match.group(1)

    # –ò—â–µ–º –¥–æ–º–µ–Ω
    domain_match = re.search(patterns['domain'], text, re.IGNORECASE)
    if not domain_match:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ–º–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–æ–º–µ–Ω: example.com")
    result['domain'] = domain_match.group(1).lower()

    # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_match = re.search(patterns['users'], text, re.IGNORECASE | re.UNICODE)
    if not users_match:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 100")

    try:
        users_count = int(users_match.group(1))
        if users_count < 1:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        result['users_count'] = users_count
    except ValueError as e:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    return result


@router.message(CreateCertificateStates.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    if message.text == ButtonTexts.CANCEL:
        await cancel_creation(message, state)
        return

    if message.text != ButtonTexts.CONFIRM:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_confirmation_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        certificate_request = CertificateRequest(
            domain=data['domain'],
            inn=data['inn'],
            valid_from=data['valid_from'],
            valid_to=data['valid_to'],
            users_count=data['users_count'],
            created_by=message.from_user.id,
            created_by_username=message.from_user.username,
            created_by_full_name=message.from_user.full_name
        )

        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {certificate_request}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        logger.info("–í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
        certificate, has_existing = certificate_service.create_certificate(certificate_request)
        logger.info(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {certificate.certificate_id}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        cert_info = certificate_service.format_certificate_info(certificate, detailed=True)
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {cert_info}")

        success_message = f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n{cert_info}"
        logger.info(f"–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {success_message}")

        await message.answer(
            success_message,
            reply_markup=get_main_menu_admin()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if settings.notification_group and settings.notification_group != 0:
                notification_text = (
                    f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n\n"
                    f"üÜî ID: {certificate.certificate_id}\n"
                    f"üåê –î–æ–º–µ–Ω: {certificate.domain}\n"
                    f"üè¢ –ò–ù–ù: {certificate.inn}\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {certificate.validity_period}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {certificate.users_count}\n"
                    f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {certificate.creator_display_name}"
                )

                # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                bot = message.bot
                await bot.send_message(
                    chat_id=settings.notification_group,
                    text=notification_text
                )
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
            else:
                logger.info("–ì—Ä—É–ø–ø–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")

        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}", exc_info=True)

        if isinstance(e, ValidationError):
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
        elif isinstance(e, GenerationError):
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID: {e}"
        else:
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."

        await message.answer(
            error_text + "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_admin()
        )
        await state.clear()


@router.message(F.text == ButtonTexts.MY_CERTIFICATES)
async def show_user_certificates(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    try:
        certificates = certificate_service.get_user_certificates(
            message.from_user.id, active_only=False
        )

        if not certificates:
            await message.answer(
                "üìù –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.",
                reply_markup=get_main_menu_admin()
            )
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
        active_certificates = [cert for cert in certificates if cert.is_active and not cert.is_expired]
        expired_certificates = [cert for cert in certificates if cert.is_active and cert.is_expired]
        inactive_certificates = [cert for cert in certificates if not cert.is_active]

        response_parts = []

        if active_certificates:
            active_list = certificate_service.format_certificates_list(active_certificates)
            response_parts.append(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ({len(active_certificates)}):\n{active_list}")

        if expired_certificates:
            expired_list = certificate_service.format_certificates_list(expired_certificates)
            response_parts.append(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ({len(expired_certificates)}):\n{expired_list}")

        if inactive_certificates:
            inactive_list = certificate_service.format_certificates_list(inactive_certificates)
            response_parts.append(f"‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ({len(inactive_certificates)}):\n{inactive_list}")

        response_text = f"üìã –í–∞—à–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (–≤—Å–µ–≥–æ: {len(certificates)}):\n\n" + \
                        "\n\n".join(response_parts)

        await message.answer(response_text, reply_markup=get_main_menu_admin())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.",
            reply_markup=get_main_menu_admin()
        )


async def cancel_creation(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    await state.clear()
    await message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_admin()
    )