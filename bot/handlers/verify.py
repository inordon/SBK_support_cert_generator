"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
"""

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from core.service import get_certificate_service
from core.models import SearchRequest
from core.exceptions import *
from ..states import VerifyCertificateStates, SearchStates
from ..keyboards import (
    get_main_menu_admin, get_main_menu_verify, get_search_type_keyboard,
    get_cancel_keyboard, get_back_keyboard, ButtonTexts
)
from ..middleware import verify_required
from config.settings import get_settings

logger = logging.getLogger(__name__)
router = Router()
router.message.middleware(verify_required())

# –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
certificate_service = get_certificate_service()
settings = get_settings()


@router.message(F.text == ButtonTexts.VERIFY_CERTIFICATE)
async def start_verify_certificate(message: Message, state: FSMContext, user_permissions: dict):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    await state.clear()

    await message.answer(
        "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n"
        "–§–æ—Ä–º–∞—Ç ID: XXXXX-XXXXX-XXXXX-XXXXX\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: A7K9M-X3P2R-Q8W1E-RT0524",
        reply_markup=get_cancel_keyboard()
    )

    await state.set_state(VerifyCertificateStates.waiting_for_certificate_id)


@router.message(VerifyCertificateStates.waiting_for_certificate_id)
async def process_certificate_verification(message: Message, state: FSMContext, user_permissions: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ ID."""
    if message.text == ButtonTexts.CANCEL:
        await cancel_verification(message, state, user_permissions)
        return

    certificate_id = message.text.strip().upper()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        certificate = certificate_service.verify_certificate(certificate_id, message.from_user.id)

        if certificate is None:
            await message.answer(
                f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å ID {certificate_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ ID –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:",
                reply_markup=get_cancel_keyboard()
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        cert_info = certificate_service.format_certificate_info(certificate, detailed=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
        status_info = []

        if not certificate.is_active:
            status_info.append("‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        elif certificate.is_expired:
            status_info.append("‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏—Å—Ç–µ–∫")
        elif certificate.days_left <= 7:
            status_info.append(f"‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ {certificate.days_left} –¥–Ω–µ–π")
        elif certificate.days_left <= 30:
            status_info.append(f"‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {certificate.days_left} –¥–Ω–µ–π")
        else:
            status_info.append("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")

        response_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n{cert_info}"

        if status_info:
            response_text += f"\n\n{' '.join(status_info)}"

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_main_menu_admin() if user_permissions['is_admin'] else get_main_menu_verify()

        await message.answer(
            response_text,
            reply_markup=keyboard
        )

        await state.clear()

    except ValidationError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç ID –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:",
            reply_markup=get_cancel_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ {certificate_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard()
        )


@router.message(F.text == ButtonTexts.SEARCH)
async def start_search(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."""
    await state.clear()

    await message.answer(
        "üîé –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_search_type_keyboard()
    )

    await state.set_state(SearchStates.waiting_for_search_type)


@router.message(SearchStates.waiting_for_search_type)
async def process_search_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞."""
    if message.text == ButtonTexts.BACK:
        await cancel_search(message, state)
        return

    if message.text == ButtonTexts.SEARCH_BY_DOMAIN:
        await message.answer(
            "üåê –ü–æ–∏—Å–∫ –ø–æ –¥–æ–º–µ–Ω—É\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
            "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ –ø–æ–ª–Ω—ã–π –¥–æ–º–µ–Ω (example.com), "
            "—Ç–∞–∫ –∏ –µ–≥–æ —á–∞—Å—Ç—å (example) –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–º–µ–Ω–æ–≤:",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(SearchStates.waiting_for_domain_search)

    elif message.text == ButtonTexts.SEARCH_BY_INN:
        await message.answer(
            "üè¢ –ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(SearchStates.waiting_for_inn_search)

    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_search_type_keyboard()
        )


@router.message(SearchStates.waiting_for_domain_search)
async def process_domain_search(message: Message, state: FSMContext, user_permissions: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –¥–æ–º–µ–Ω—É."""
    if message.text == ButtonTexts.BACK:
        await message.answer(
            "üîé –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_search_type_keyboard()
        )
        await state.set_state(SearchStates.waiting_for_search_type)
        return

    domain_query = message.text.strip().lower()

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞
        search_request = SearchRequest(domain=domain_query, active_only=True)
        certificates = certificate_service.search_certificates(search_request)

        if not certificates:
            await message.answer(
                f"üìù –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ '{domain_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_main_menu_admin() if user_permissions['is_admin'] else get_main_menu_verify()
            )
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            result_text = f"üîé –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è '{domain_query}': {len(certificates)}\n\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            for i, certificate in enumerate(certificates[:3], 1):
                cert_info = certificate_service.format_certificate_info(certificate)
                result_text += f"{i}. {cert_info}\n\n"

            # –ï—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –±–æ–ª—å—à–µ 3, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            if len(certificates) > 3:
                remaining_list = certificate_service.format_certificates_list(certificates[3:])
                result_text += f"–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:\n{remaining_list}"

            keyboard = get_main_menu_admin() if user_permissions['is_admin'] else get_main_menu_verify()
            await message.answer(result_text, reply_markup=keyboard)

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–º–µ–Ω—É {domain_query}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard()
        )


@router.message(SearchStates.waiting_for_inn_search)
async def process_inn_search(message: Message, state: FSMContext, user_permissions: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù."""
    if message.text == ButtonTexts.BACK:
        await message.answer(
            "üîé –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_search_type_keyboard()
        )
        await state.set_state(SearchStates.waiting_for_search_type)
        return

    inn_query = message.text.strip()

    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
    if not inn_query.isdigit() or len(inn_query) not in [10, 12]:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –í–≤–µ–¥–∏—Ç–µ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä:",
            reply_markup=get_back_keyboard()
        )
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞
        search_request = SearchRequest(inn=inn_query, active_only=True)
        certificates = certificate_service.search_certificates(search_request)

        if not certificates:
            await message.answer(
                f"üìù –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –ò–ù–ù '{inn_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_main_menu_admin() if user_permissions['is_admin'] else get_main_menu_verify()
            )
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            result_text = f"üîé –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –ò–ù–ù '{inn_query}': {len(certificates)}\n\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            for i, certificate in enumerate(certificates[:3], 1):
                cert_info = certificate_service.format_certificate_info(certificate)
                result_text += f"{i}. {cert_info}\n\n"

            # –ï—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –±–æ–ª—å—à–µ 3, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            if len(certificates) > 3:
                remaining_list = certificate_service.format_certificates_list(certificates[3:])
                result_text += f"–û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:\n{remaining_list}"

            keyboard = get_main_menu_admin() if user_permissions['is_admin'] else get_main_menu_verify()
            await message.answer(result_text, reply_markup=keyboard)

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ò–ù–ù {inn_query}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard()
        )


async def cancel_verification(message: Message, state: FSMContext, user_permissions: dict):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    await state.clear()
    keyboard = get_main_menu_admin() if user_permissions['is_admin'] else get_main_menu_verify()
    await message.answer(
        "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=keyboard
    )


async def cancel_search(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."""
    await state.clear()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    is_admin = settings.is_admin(message.from_user.id)
    keyboard = get_main_menu_admin() if is_admin else get_main_menu_verify()

    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=keyboard
    )