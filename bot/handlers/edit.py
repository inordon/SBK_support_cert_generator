"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
"""

import logging
import re
from datetime import datetime, date
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from core.service import get_certificate_service
from core.models import EditCertificateDatesRequest
from core.exceptions import *
from ..states import EditCertificateStates
from ..keyboards import (
    get_main_menu_admin, get_edit_confirmation_keyboard, get_cancel_keyboard,
    ButtonTexts
)
from ..middleware import admin_required

logger = logging.getLogger(__name__)
router = Router()
router.message.middleware(admin_required())

# –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
certificate_service = get_certificate_service()


@router.message(F.text == ButtonTexts.EDIT_CERTIFICATE)
async def start_edit_certificate(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    await state.clear()

    instruction_text = """‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞

–í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.

–§–æ—Ä–º–∞—Ç ID: XXXXX-XXXXX-XXXXX-XXXXX
–ù–∞–ø—Ä–∏–º–µ—Ä: A7K9M-X3P2R-Q8W1E-RT0524

–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ ID –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""

    await message.answer(
        instruction_text,
        reply_markup=get_cancel_keyboard()
    )

    await state.set_state(EditCertificateStates.waiting_for_certificate_id)


@router.message(EditCertificateStates.waiting_for_certificate_id)
async def process_certificate_id_for_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if message.text == ButtonTexts.CANCEL:
        await cancel_edit(message, state)
        return

    certificate_id = message.text.strip().upper()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        certificate = certificate_service.verify_certificate(certificate_id, message.from_user.id)

        if certificate is None:
            await message.answer(
                f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å ID {certificate_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ ID –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:",
                reply_markup=get_cancel_keyboard()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            certificate_id=certificate_id,
            original_certificate=certificate
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        cert_info = certificate_service.format_certificate_info(certificate, detailed=True)

        dates_instruction = """
üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 01.01.2025-31.12.2025
‚Ä¢ 15.06.2024-14.06.2026

–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–æ—Ç–º–µ–Ω–∏—Ç—å" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó parse_mode, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å Markdown
        await message.answer(
            f"üìã –ù–∞–π–¥–µ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:\n\n{cert_info}\n\n{dates_instruction}",
            reply_markup=get_cancel_keyboard()
        )

        await state.set_state(EditCertificateStates.waiting_for_new_dates)

    except ValidationError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç ID –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ {certificate_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard()
        )


@router.message(EditCertificateStates.waiting_for_new_dates)
async def process_new_dates(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    if message.text == ButtonTexts.CANCEL:
        await cancel_edit(message, state)
        return

    try:
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã
        new_valid_from, new_valid_to = parse_dates_string(message.text.strip())

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        certificate_id = state_data['certificate_id']
        original_certificate = state_data['original_certificate']

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã
        errors = validate_new_dates(new_valid_from, new_valid_to)
        if errors:
            error_text = "‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors)
            error_text += "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å':"

            await message.answer(
                error_text,
                reply_markup=get_cancel_keyboard()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            new_valid_from=new_valid_from,
            new_valid_to=new_valid_to
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        comparison_text = format_dates_comparison(
            original_certificate.valid_from,
            original_certificate.valid_to,
            new_valid_from,
            new_valid_to
        )

        confirmation_text = f"""üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:

üÜî ID: {certificate_id}
üåê –î–æ–º–µ–Ω: {original_certificate.domain}

{comparison_text}

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó parse_mode
        await message.answer(
            confirmation_text,
            reply_markup=get_edit_confirmation_keyboard()
        )

        await state.set_state(EditCertificateStates.waiting_for_edit_confirmation)

    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç: {e}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2025-31.12.2025",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞—Ç: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )


@router.message(EditCertificateStates.waiting_for_edit_confirmation)
async def process_edit_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    if message.text == ButtonTexts.CANCEL_EDIT:
        await cancel_edit(message, state)
        return

    if message.text != ButtonTexts.CONFIRM_EDIT:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_edit_confirmation_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        edit_request = EditCertificateDatesRequest(
            certificate_id=state_data['certificate_id'],
            new_valid_from=state_data['new_valid_from'],
            new_valid_to=state_data['new_valid_to'],
            edited_by=message.from_user.id,
            edit_reason=f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.full_name or message.from_user.username or message.from_user.id}"
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        updated_certificate = certificate_service.edit_certificate_dates(edit_request)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        cert_info = certificate_service.format_certificate_info(updated_certificate, detailed=True)

        success_message = f"‚úÖ –î–∞—Ç—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!\n\n{cert_info}"

        await message.answer(
            success_message,
            reply_markup=get_main_menu_admin()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        try:
            from config.settings import get_settings
            settings = get_settings()

            if settings.notification_group and settings.notification_group != 0:
                notification_text = (
                    f"üìù –ò–∑–º–µ–Ω–µ–Ω—ã –¥–∞—Ç—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n"
                    f"üÜî ID: {updated_certificate.certificate_id}\n"
                    f"üåê –î–æ–º–µ–Ω: {updated_certificate.domain}\n"
                    f"üìÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {updated_certificate.validity_period}\n"
                    f"üë§ –ò–∑–º–µ–Ω–µ–Ω–æ: {updated_certificate.creator_display_name}"
                )

                bot = message.bot
                await bot.send_message(
                    chat_id=settings.notification_group,
                    text=notification_text
                )
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}", exc_info=True)

        if isinstance(e, CertificateNotFoundError):
            error_text = f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}"
        elif isinstance(e, ValidationError):
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
        else:
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."

        await message.answer(
            error_text + "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_admin()
        )
        await state.clear()


async def cancel_edit(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    await state.clear()
    await message.answer(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_admin()
    )


def parse_dates_string(dates_string: str) -> tuple[date, date]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY-DD.MM.YYYY.

    Args:
        dates_string: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–∞–º–∏

    Returns:
        tuple[date, date]: –ö–æ—Ä—Ç–µ–∂ –¥–∞—Ç –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è

    Raises:
        ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    if '-' not in dates_string:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")

    date_parts = dates_string.split('-')
    if len(date_parts) != 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")

    try:
        valid_from = datetime.strptime(date_parts[0].strip(), "%d.%m.%Y").date()
        valid_to = datetime.strptime(date_parts[1].strip(), "%d.%m.%Y").date()
        return valid_from, valid_to
    except ValueError as e:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {e}")


def validate_new_dates(valid_from: date, valid_to: date) -> list[str]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.

    Args:
        valid_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è
        valid_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è

    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    errors = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
    if valid_to <= valid_from:
        errors.append("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–∏–æ–¥ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ª–µ—Ç
    years_diff = (valid_to - valid_from).days / 365.25
    if years_diff > 5:
        errors.append("–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ª–µ—Ç")

    return errors


def format_dates_comparison(old_from: date, old_to: date, new_from: date, new_to: date) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –¥–∞—Ç –ë–ï–ó Markdown —Ä–∞–∑–º–µ—Ç–∫–∏.

    Args:
        old_from: –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        old_to: –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        new_from: –ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        new_to: –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    """
    old_period = f"{old_from.strftime('%d.%m.%Y')}-{old_to.strftime('%d.%m.%Y')}"
    new_period = f"{new_from.strftime('%d.%m.%Y')}-{new_to.strftime('%d.%m.%Y')}"

    return f"""üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è:

‚ùå –ë—ã–ª–æ: {old_period}
‚úÖ –ë—É–¥–µ—Ç: {new_period}

üìä –î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
‚Ä¢ –ù–∞—á–∞–ª–æ: {old_from.strftime('%d.%m.%Y')} ‚Üí {new_from.strftime('%d.%m.%Y')}
‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {old_to.strftime('%d.%m.%Y')} ‚Üí {new_to.strftime('%d.%m.%Y')}"""