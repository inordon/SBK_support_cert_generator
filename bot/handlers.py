"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""
import logging
from typing import Dict, Any, Optional

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.generator import CertificateGenerator
from core.storage import DatabaseStorage, FileStorage, StorageError
from core.validators import ValidationError


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
class GenerateStates(StatesGroup):
    waiting_for_domain = State()
    waiting_for_inn = State()
    waiting_for_period = State()
    waiting_for_users = State()
    confirmation = State()


class CertificateHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

    def __init__(
            self,
            db_storage: DatabaseStorage,
            file_storage: FileStorage,
            allowed_users: set,
            verify_users: set,
            notification_chat: Optional[int] = None
    ):
        self.db_storage = db_storage
        self.file_storage = file_storage
        self.generator = CertificateGenerator()
        self.allowed_users = allowed_users
        self.verify_users = verify_users
        self.notification_chat = notification_chat
        self.logger = logging.getLogger(__name__)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
        self.router = Router()
        self._setup_handlers()

    def _check_permissions(self, user_id: int, action: str = "generate") -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if action == "generate":
            return user_id in self.allowed_users
        elif action == "verify":
            return user_id in self.verify_users or user_id in self.allowed_users
        return False

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

        @self.router.message(Command("start"))
        async def cmd_start(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            welcome_text = (
                "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n"
                "‚Ä¢ /verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n"
                "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                "‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É."
            )

            keyboard = InlineKeyboardBuilder()

            if self._check_permissions(message.from_user.id, "generate"):
                keyboard.add(InlineKeyboardButton(
                    text="üÜï –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
                    callback_data="generate"
                ))

            if self._check_permissions(message.from_user.id, "verify"):
                keyboard.add(InlineKeyboardButton(
                    text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
                    callback_data="verify"
                ))

            keyboard.adjust(1)

            await message.answer(welcome_text, reply_markup=keyboard.as_markup())

        @self.router.message(Command("help"))
        async def cmd_help(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
            help_text = (
                "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                "üÜï /generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n"
                "   –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n"
                "üîç /verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n"
                "   –í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞\n\n"
                "‚ùå /cancel - –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
                "   –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\n"
                "üìã –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:\n"
                "‚Ä¢ –î–æ–º–µ–Ω: example.com –∏–ª–∏ *.example.com\n"
                "‚Ä¢ –ò–ù–ù: 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä\n"
                "‚Ä¢ –ü–µ—Ä–∏–æ–¥: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì\n"
                "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000\n\n"
                "–ü—Ä–∏–º–µ—Ä ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ABCD1-XYZ12-QWRT5-WX0124"
            )
            await message.answer(help_text)

        @self.router.message(Command("cancel"))
        async def cmd_cancel(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
            await state.clear()
            await message.answer(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                ]])
            )

        @self.router.message(Command("generate"))
        async def cmd_generate(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate"""
            if not self._check_permissions(message.from_user.id, "generate"):
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.")
                return

            await message.answer(
                "üÜï –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.\n\n"
                "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: example.com –∏–ª–∏ *.example.com"
            )
            await state.set_state(GenerateStates.waiting_for_domain)

        @self.router.message(Command("verify"))
        async def cmd_verify(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /verify"""
            if not self._check_permissions(message.from_user.id, "verify"):
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.")
                return

            await message.answer(
                "üîç –í–≤–µ–¥–∏—Ç–µ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
                "–§–æ—Ä–º–∞—Ç: XXXXX-XXXXX-XXXXX-XXXXX\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ABCD1-XYZ12-QWRT5-WX0124"
            )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        @self.router.callback_query(F.data == "generate")
        async def callback_generate(callback, state: FSMContext):
            """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
            await callback.message.delete()
            await cmd_generate(callback.message, state)
            await callback.answer()

        @self.router.callback_query(F.data == "verify")
        async def callback_verify(callback):
            """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
            await callback.message.delete()
            await cmd_verify(callback.message)
            await callback.answer()

        @self.router.callback_query(F.data == "start")
        async def callback_start(callback):
            """Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
            await callback.message.delete()
            await cmd_start(callback.message)
            await callback.answer()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        @self.router.message(StateFilter(GenerateStates.waiting_for_domain))
        async def process_domain(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–º–µ–Ω–∞"""
            domain = message.text.strip()

            try:
                self.generator.validators.validate_domain(domain)
                await state.update_data(domain=domain)

                await message.answer(
                    f"‚úÖ –î–æ–º–µ–Ω: {domain}\n\n"
                    "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n"
                    "10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä"
                )
                await state.set_state(GenerateStates.waiting_for_inn)

            except ValidationError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

        @self.router.message(StateFilter(GenerateStates.waiting_for_inn))
        async def process_inn(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù"""
            inn = message.text.strip()

            try:
                self.generator.validators.validate_inn(inn)
                await state.update_data(inn=inn)

                await message.answer(
                    f"‚úÖ –ò–ù–ù: {inn}\n\n"
                    "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                    "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024-31.12.2024"
                )
                await state.set_state(GenerateStates.waiting_for_period)

            except ValidationError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

        @self.router.message(StateFilter(GenerateStates.waiting_for_period))
        async def process_period(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞"""
            period = message.text.strip()

            try:
                valid_from, valid_to = self.generator.validators.validate_period(period)
                await state.update_data(period=period, valid_from=valid_from, valid_to=valid_to)

                await message.answer(
                    f"‚úÖ –ü–µ—Ä–∏–æ–¥: {period}\n\n"
                    "4Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                    "–ß–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000"
                )
                await state.set_state(GenerateStates.waiting_for_users)

            except ValidationError as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

        @self.router.message(StateFilter(GenerateStates.waiting_for_users))
        async def process_users(message: Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
            try:
                users_count = int(message.text.strip())
                self.generator.validators.validate_users_count(users_count)
                await state.update_data(users_count=users_count)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                data = await state.get_data()

                confirmation_text = (
                    "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:\n\n"
                    f"üåê –î–æ–º–µ–Ω: {data['domain']}\n"
                    f"üè¢ –ò–ù–ù: {data['inn']}\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {data['period']}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}\n\n"
                    "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_generate"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_generate")
                    ]
                ])

                await message.answer(confirmation_text, reply_markup=keyboard)
                await state.set_state(GenerateStates.confirmation)

            except (ValueError, ValidationError) as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

        @self.router.callback_query(F.data == "confirm_generate", StateFilter(GenerateStates.confirmation))
        async def confirm_generate(callback, state: FSMContext):
            """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
            data = await state.get_data()

            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                existing = await self.db_storage.find_certificates_by_domain(data['domain'])
                active_certs = [cert for cert in existing if cert.is_active]

                if active_certs:
                    await callback.message.edit_text(
                        f"‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞ {data['domain']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:\n"
                        f"ID: {active_certs[0].certificate_id}\n\n"
                        "–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                        ]])
                    )
                    await state.clear()
                    await callback.answer()
                    return

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                certificate = self.generator.generate_certificate(
                    domain=data['domain'],
                    inn=data['inn'],
                    period=data['period'],
                    users_count=data['users_count'],
                    created_by=callback.from_user.id
                )

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                cert_uuid = await self.db_storage.save_certificate(certificate)
                certificate.id = cert_uuid

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                file_path = self.file_storage.save_certificate(certificate)

                # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                success_text = (
                    "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üÜî ID: `{certificate.certificate_id}`\n"
                    f"üåê –î–æ–º–µ–Ω: {certificate.domain}\n"
                    f"üè¢ –ò–ù–ù: {certificate.inn}\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {data['period']}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {certificate.users_count}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω: {certificate.created_at.strftime('%d.%m.%Y %H:%M')}"
                )

                await callback.message.edit_text(
                    success_text,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                    ]])
                )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                if self.notification_chat:
                    notification_text = (
                        "üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n\n"
                        f"ID: {certificate.certificate_id}\n"
                        f"–î–æ–º–µ–Ω: {certificate.domain}\n"
                        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {callback.from_user.full_name} (@{callback.from_user.username})"
                    )
                    try:
                        await callback.bot.send_message(self.notification_chat, notification_text)
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.info(
                    f"–°–æ–∑–¥–∞–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {certificate.certificate_id} "
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id} ({callback.from_user.username})"
                )

                await state.clear()
                await callback.answer("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω!")

            except (ValidationError, StorageError) as e:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                    ]])
                )
                await state.clear()
                await callback.answer()

            except Exception as e:
                self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
                await callback.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                    ]])
                )
                await state.clear()
                await callback.answer()

        @self.router.callback_query(F.data == "cancel_generate")
        async def cancel_generate(callback, state: FSMContext):
            """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
            await state.clear()
            await callback.message.edit_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                ]])
            )
            await callback.answer()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏)
        @self.router.message(F.text.regexp(r'^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$'))
                                           async def verify_certificate_handler(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ ID"""
            if not self._check_permissions(message.from_user.id, "verify"):
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.")
                return

            certificate_id = message.text.strip().upper()

            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                if not self.generator.verify_certificate_id_format(certificate_id):
                    await message.answer(
                        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {certificate_id}\n"
                        "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: XXXXX-XXXXX-XXXXX-XXXXX"
                    )
                    return

                # –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –ë–î
                certificate = await self.db_storage.get_certificate(certificate_id)

                if not certificate:
                    # –ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–∞—Ö (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
                    certificate = self.file_storage.load_certificate(certificate_id)

                if not certificate:
                    await message.answer(
                        f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {certificate_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                        ]])
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                from datetime import datetime
                now = datetime.now()

                status_icon = "‚úÖ"
                status_text = "–î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù"

                if not getattr(certificate, 'is_active', True):
                    status_icon = "‚ùå"
                    status_text = "–î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù"
                elif now < certificate.valid_from:
                    status_icon = "‚è≥"
                    status_text = "–ï–©–ï –ù–ï –î–ï–ô–°–¢–í–£–ï–¢"
                elif now > certificate.valid_to:
                    status_icon = "‚ùå"
                    status_text = "–ò–°–¢–ï–ö"

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                verify_text = (
                    f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:\n\n"
                    f"üÜî ID: `{certificate.certificate_id}`\n"
                    f"üåê –î–æ–º–µ–Ω: {certificate.domain}\n"
                    f"üè¢ –ò–ù–ù: {certificate.inn}\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {certificate.valid_from.strftime('%d.%m.%Y')}-{certificate.valid_to.strftime('%d.%m.%Y')}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {certificate.users_count}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω: {certificate.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status_icon} {status_text}"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π", callback_data="verify"),
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                    ]
                ])

                await message.answer(verify_text, parse_mode="Markdown", reply_markup=keyboard)

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.info(
                    f"–ü—Ä–æ–≤–µ—Ä–µ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {certificate_id} "
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} ({message.from_user.username})"
                )

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ {certificate_id}: {e}")
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
                    ]])
                )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.router.message()
        async def unknown_message(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            help_text = (
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "‚Ä¢ /generate - –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n"
                "‚Ä¢ /verify - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n"
                "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            ]])

            await message.answer(help_text, reply_markup=keyboard)