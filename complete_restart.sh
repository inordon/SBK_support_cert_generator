#!/bin/bash
# complete_restart.sh
# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

set -e

echo "üîÑ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã Docker Compose
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    echo "‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
    exit 1
fi

echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $DOCKER_COMPOSE"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
$DOCKER_COMPOSE down

# –£–¥–∞–ª–µ–Ω–∏–µ volumes
echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ volumes..."
$DOCKER_COMPOSE down -v

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ volumes
echo "üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ volumes..."
docker volume ls -q | grep -E "(postgres|redis|certificates|logs)" | xargs -r docker volume rm || true

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã..."
docker system prune -f

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p certificates logs database
chmod 755 certificates logs database

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f database/create_user.sh ]; then
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ database/create_user.sh..."
    cat > database/create_user.sh << 'EOF'
#!/bin/bash
# database/create_user.sh
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è cert_app –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã

set -e

echo "Creating application user cert_app..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CERT_APP_PASSWORD –∑–∞–¥–∞–Ω–∞
if [ -z "$CERT_APP_PASSWORD" ]; then
    echo "ERROR: CERT_APP_PASSWORD environment variable is not set"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è cert_app —Å –ø–∞—Ä–æ–ª–µ–º –∏ –ø—Ä–∞–≤–∞–º–∏
psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    DO \$\$
    BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'cert_app') THEN
            -- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è cert_app
            CREATE USER cert_app WITH PASSWORD '$CERT_APP_PASSWORD';
            RAISE NOTICE 'User cert_app created';
        ELSE
            RAISE NOTICE 'User cert_app already exists';
        END IF;
    END
    \$\$;

    -- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ —Å—Ö–µ–º—É certificates
    GRANT USAGE ON SCHEMA certificates TO cert_app;

    -- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã
    GRANT SELECT, INSERT, UPDATE, DELETE ON certificates TO cert_app;
    GRANT SELECT, INSERT ON certificate_history TO cert_app;

    -- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    GRANT SELECT ON active_certificates TO cert_app;
    GRANT SELECT ON certificates_with_history TO cert_app;

    -- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    GRANT USAGE ON ALL SEQUENCES IN SCHEMA certificates TO cert_app;

    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SELECT 'User cert_app configured successfully' as result;
EOSQL

echo "User cert_app created successfully with all necessary permissions."
EOF
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–∫—Ä–∏–ø—Ç
chmod +x database/create_user.sh

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
source .env

if [ -z "$BOT_TOKEN" ] || [ "$BOT_TOKEN" = "your_bot_token_here" ]; then
    echo "‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
    echo "   –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram"
    exit 1
fi

if [ -z "$CERT_APP_PASSWORD" ] || [ "$CERT_APP_PASSWORD" = "strong_app_password" ]; then
    echo "‚ùå CERT_APP_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î"
    exit 1
fi

if [ -z "$POSTGRES_PASSWORD" ] || [ "$POSTGRES_PASSWORD" = "strong_postgres_password" ]; then
    echo "‚ùå POSTGRES_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è PostgreSQL"
    exit 1
fi

if [ -z "$ALLOWED_USERS" ] || [ "$ALLOWED_USERS" = "123456789,987654321" ]; then
    echo "‚ùå ALLOWED_USERS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
    echo "   –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram User ID (–ø–æ–ª—É—á–∏—Ç—å —É @userinfobot)"
    exit 1
fi

echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
$DOCKER_COMPOSE build --no-cache --pull

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
$DOCKER_COMPOSE up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL..."
for i in {1..30}; do
    if $DOCKER_COMPOSE exec -T postgres pg_isready -U postgres >/dev/null 2>&1; then
        echo "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω"
        break
    fi
    echo "   –ü–æ–ø—ã—Ç–∫–∞ $i/30..."
    sleep 2
done

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è cert_app..."
if $DOCKER_COMPOSE exec -T postgres psql -U postgres -d certificates_db -c "SELECT usename FROM pg_user WHERE usename = 'cert_app';" | grep -q cert_app; then
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å cert_app —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
else
    echo "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å cert_app –Ω–µ —Å–æ–∑–¥–∞–Ω"
    echo "üìã –õ–æ–≥–∏ PostgreSQL:"
    $DOCKER_COMPOSE logs postgres --tail=20
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
if $DOCKER_COMPOSE exec -T postgres psql -U cert_app -d certificates_db -c "SELECT current_user;" >/dev/null 2>&1; then
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å cert_app –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –ë–î"
else
    echo "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å cert_app –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü..."
if $DOCKER_COMPOSE exec -T postgres psql -U cert_app -d certificates_db -c "\dt certificates.*" | grep -q certificates; then
    echo "‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
else
    echo "‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
$DOCKER_COMPOSE ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API..."
sleep 5
if curl -f http://localhost:8000/health >/dev/null 2>&1; then
    echo "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ö†Ô∏è API –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
    echo "üìã –õ–æ–≥–∏ API:"
    $DOCKER_COMPOSE logs api --tail=10
fi

echo ""
echo "üéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!"
echo ""
echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  $DOCKER_COMPOSE logs -f              # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "  $DOCKER_COMPOSE ps                   # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  curl http://localhost:8000/health   # –ü—Ä–æ–≤–µ—Ä–∫–∞ API"
echo ""
echo "ü§ñ Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
echo "   –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
echo ""
echo "üìã –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:"
echo "  $DOCKER_COMPOSE logs bot     # –õ–æ–≥–∏ –±–æ—Ç–∞"
echo "  $DOCKER_COMPOSE logs api     # –õ–æ–≥–∏ API"
echo "  $DOCKER_COMPOSE logs postgres # –õ–æ–≥–∏ –ë–î"