services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: certificates_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Передаем пароль для cert_app через переменную окружения
      POSTGRES_CERT_APP_PASSWORD: ${CERT_APP_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - cert_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d certificates_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis для хранения состояний FSM (опционально)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - cert_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API сервис
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://cert_app:${CERT_APP_PASSWORD}@postgres:5432/certificates_db
      API_KEY: ${API_KEY}
      CERTIFICATES_DIR: /app/certificates
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - certificates_data:/app/certificates:rw
      - api_logs:/app/logs:rw
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cert_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Telegram бот
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
      target: production
    restart: unless-stopped
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: postgresql://cert_app:${CERT_APP_PASSWORD}@postgres:5432/certificates_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      ALLOWED_USERS: ${ALLOWED_USERS}
      VERIFY_USERS: ${VERIFY_USERS}
      NOTIFICATION_CHAT: ${NOTIFICATION_CHAT}
      CERTIFICATES_DIR: /app/certificates
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - certificates_data:/app/certificates:rw
      - bot_logs:/app/logs:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cert_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://api.telegram.org/bot${BOT_TOKEN}/getMe')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  certificates_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CERTIFICATES_PATH:-./certificates}
  api_logs:
    driver: local
  bot_logs:
    driver: local

networks:
  cert_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16