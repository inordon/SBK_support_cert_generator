services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: certificates_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-certificates_db}
      POSTGRES_USER: ${DB_USER:-certificates_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - certificates_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-certificates_user} -d ${DB_NAME:-certificates_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Telegram бот
  certificate_bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: certificate_bot
    restart: unless-stopped
    user: "0:0"  # Запуск от root для решения проблем с правами
    environment:
      # Telegram
      BOT_TOKEN: ${BOT_TOKEN}
      ADMIN_USERS: ${ADMIN_USERS}
      VERIFY_USERS: ${VERIFY_USERS}
      NOTIFICATION_GROUP: ${NOTIFICATION_GROUP}

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-certificates_db}
      DB_USER: ${DB_USER:-certificates_user}
      DB_PASSWORD: ${DB_PASSWORD}

      # Storage
      CERTIFICATES_PATH: /app/certificates
      LOG_FILE: /app/logs/bot.log

      # App settings
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      TIMEZONE: ${TIMEZONE:-Europe/Moscow}
    volumes:
      # Создаем bind mounts для локальных директорий
      # Docker автоматически создаст директории если их нет
      - type: bind
        source: ./data/certificates
        target: /app/certificates
        bind:
          create_host_path: true
      - type: bind
        source: ./data/logs
        target: /app/logs
        bind:
          create_host_path: true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - certificates_network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Веб-интерфейс для мониторинга (опционально)
  adminer:
    image: adminer:4.8.1
    container_name: certificates_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    networks:
      - certificates_network
    profiles:
      - admin
    depends_on:
      - postgres

  # Backup сервис (опционально)
  backup:
    image: postgres:15-alpine
    container_name: certificates_backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - type: bind
        source: ./data/backups
        target: /backups
        bind:
          create_host_path: true
    networks:
      - certificates_network
    profiles:
      - backup
    command: >
      sh -c "
        echo 'Creating backup...' &&
        mkdir -p /backups &&
        pg_dump -h postgres -U ${DB_USER:-certificates_user} -d ${DB_NAME:-certificates_db} > /backups/backup_$(date +%Y%m%d_%H%M%S).sql &&
        echo 'Backup completed successfully!'
      "
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local

networks:
  certificates_network:
    driver: bridge